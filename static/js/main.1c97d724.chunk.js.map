{"version":3,"sources":["components/Header/Header.jsx","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","api/api.js","api/posts.js","components/PostUpdate/PostUpdate.jsx","components/PostDetails/PostDetails.jsx","api/comments.js","components/PostAdd/PostAdd.jsx","App.js","api/users.js","index.js"],"names":["Header","className","exact","to","activeClassName","PostsList","posts","selectedPostId","setSelectPost","removePost","length","map","post","title","body","type","classNames","PostList__button","button","button_active","id","onClick","NewCommentForm","onAdd","useState","newName","setNewName","newEmail","setNewEmail","newBody","setNewBody","clearForm","onSubmit","event","preventDefault","name","placeholder","value","onChange","target","required","Loader","get","url","options","fetch","then","response","json","result","data","save","method","headers","JSON","stringify","remove","getPosts","getPostDetails","postId","update","userId","PostUpdate","updatePost","selectedPost","setSelectedPost","setTitle","setBody","useEffect","alert","rows","PostDetails","comments","setComments","commentsHidden","setCommentsHidden","removeComment","commentId","currentComment","filter","comment","currentStatus","email","PostAdd","addPost","App","setPosts","setUsers","setSelectedPostId","path","postData","currentPost","removePostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c97d724.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Header.scss';\r\n\r\nexport const Header = () => (\r\n  <>\r\n    <Link\r\n        className=\"buttonHeader\"\r\n        exact\r\n        to=\"/\"\r\n        activeClassName=\"is-active\"\r\n      >\r\n        Home\r\n    </Link>\r\n\r\n      <Link\r\n        className=\"buttonHeader\"\r\n        exact\r\n        to=\"/post-add\"\r\n        activeClassName=\"is-active\"\r\n      >\r\n        Add Post\r\n      </Link>\r\n  </>\r\n);","import React from 'react';\r\nimport './PostsList.scss';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nexport const PostsList = ({\r\n  posts,\r\n  selectedPostId,\r\n  setSelectPost,\r\n  removePost\r\n}) => (\r\n  <div className=\"PostsList\">\r\n    <h2>Posts:</h2>\r\n\r\n    {posts.length !== 0 ? (\r\n      <ul className=\"PostsList__list\">\r\n        {posts.map(post =>(\r\n          <li\r\n            key={post.id}\r\n            className=\"PostsList__item\"\r\n          >\r\n            <div>\r\n              <b>{post.title}</b>\r\n              <div className=\"PostsList__item--body\">{post.body}</div>\r\n            </div>\r\n\r\n            <button\r\n              type=\"button\"\r\n              className={classNames({\r\n                PostList__button: true,\r\n                button: true,\r\n                button_active: selectedPostId === post.id,\r\n              })}\r\n              onClick={() => {\r\n                setSelectPost(post.id);\r\n              }}\r\n            >\r\n              {selectedPostId === post.id\r\n                ? 'Close'\r\n                : 'Open'\r\n              }\r\n            </button>\r\n\r\n            <button\r\n              className='button'\r\n              onClick={() => {\r\n                removePost(post.id);\r\n              }}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n        \r\n      </ul>\r\n    ) :(\r\n      'No user posts'\r\n    )}\r\n  </div>\r\n);\r\n\r\nPostsList.propTypes = {\r\n  posts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      userId: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  selectedPostId: PropTypes.number.isRequired,\r\n  setSelectPost: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\nimport './NewCommentForm.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const NewCommentForm = ({ onAdd }) => {\r\n  const [newName, setNewName] = useState('');\r\n  const [newEmail, setNewEmail] = useState('');\r\n  const [newBody, setNewBody] = useState('')\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    onAdd(newName, newEmail, newBody);\r\n    clearForm();\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setNewName('');\r\n    setNewEmail('');\r\n    setNewBody('');\r\n  };\r\n\r\n  return(\r\n    <form \r\n      className=\"NewCommentForm\"\r\n      onSubmit={submitHandler}\r\n    >\r\n      <div className=\"form-field\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Your name\"\r\n          className=\"NewCommentForm__input\"\r\n          value={newName}\r\n          onChange={({ target }) => setNewName(target.value)}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-field\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          placeholder=\"Your email\"\r\n          className=\"NewCommentForm__input\"\r\n          value={newEmail}\r\n          onChange={({ target }) => setNewEmail(target.value)}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-field\">\r\n        <textarea\r\n          name=\"body\"\r\n          placeholder=\"Type comment here\"\r\n          className=\"NewCommentForm__input\"\r\n          value={newBody}\r\n          onChange={({ target }) => setNewBody(target.value)}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <button\r\n        type=\"submit\"\r\n        className=\"NewCommentForm__submit-button button\"\r\n      >\r\n        Add a comment\r\n      </button>\r\n    </form>\r\n  )\r\n};\r\n\r\nNewCommentForm.propTypes = {\r\n  onAdd: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport const Loader = () => (\r\n  <div className=\"Loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\r\n\r\nexport function get(url, options) {\r\n  return fetch(`${BASE_URL}${url}`, options)\r\n    .then(response => response.json())\r\n    .then(result => result.data);\r\n}\r\n\r\nexport function save(url, data) {\r\n  return get(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-type': 'application/json; charset=UTF-8',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n}\r\n\r\nexport function patch(url, data) {\r\n  return get(url, {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-type': 'application/json; charset=UTF-8',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n}\r\n\r\nexport function remove(url) {\r\n  return get(url, { method: 'DELETE' });\r\n}\r\n","import { get, remove, save, patch } from './api';\r\n\r\nexport const getPosts = () => get('/posts');\r\n\r\nexport function getUserPosts(userId) {\r\n  return get(`/posts?userId=${userId}`);\r\n}\r\n\r\nexport function getPostDetails(postId) {\r\n  return get(`/posts/${postId}`);\r\n}\r\n\r\nexport function createPost(post) {\r\n  return save(`/posts`, {\r\n    title: post.title,\r\n    body: post.body\r\n  });\r\n}\r\n\r\nexport function update(post) {\r\n  return patch(`/posts/${post.id}`, {\r\n    userId: post.userId,\r\n    title: post.title,\r\n    body: post.body\r\n  });\r\n}\r\n\r\n\r\nexport function deletePost(postId) {\r\n  return remove(`/posts/${postId}`);\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './PostUpdate.scss';\r\nimport { getPostDetails } from '../../api/posts';\r\nimport { Loader } from '../Loader';\r\n\r\nexport const PostUpdate = ({ selectedPostId, updatePost }) => {\r\n\r\n  const [selectedPost, setSelectedPost] = useState(null);\r\n  const [title, setTitle] = useState('');\r\n  const [body, setBody] = useState('');\r\n\r\n  useEffect(() => {\r\n    getPostDetails(selectedPostId)\r\n      .then(result => setSelectedPost(result));\r\n\r\n    getPostDetails(selectedPostId)\r\n      .then(result => setTitle(result.title));\r\n\r\n    getPostDetails(selectedPostId)\r\n      .then(result => setBody(result.body))\r\n  }, []);\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    updatePost({\r\n      id: selectedPostId,\r\n      userId: selectedPost.userId,\r\n      title,\r\n      body,\r\n    })\r\n\r\n    alert('The post has been updated');\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      {selectedPost ? (\r\n        <form\r\n          className='PostUpdate'\r\n          onSubmit={submitHandler}\r\n        >\r\n          <input\r\n            className='PostUpdate__input'\r\n            placeholder='Enter post title'\r\n            value={title}\r\n            onChange={event => {\r\n              setTitle(event.target.value)\r\n            }}\r\n          >\r\n          </input>\r\n          <textarea\r\n            className='PostUpdate__input'\r\n            placeholder='Enter post body'\r\n            value = {body}\r\n            onChange={event => {\r\n              setBody(event.target.value)\r\n            }}\r\n            rows='15'\r\n          >\r\n          </textarea>\r\n\r\n          <button\r\n            className='button PostUpdate__button'\r\n            type='submit'\r\n          >\r\n            Confirm\r\n          </button>\r\n\r\n          <Link\r\n            className='button button-link PostUpdate__button'\r\n            type='button'\r\n            to='/'\r\n\r\n          >\r\n            Cancle\r\n          </Link>\r\n        </form>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </>\r\n  )\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { NewCommentForm } from '../NewCommentForm';\r\nimport { Loader } from '../Loader';\r\nimport { PostUpdate } from '../PostUpdate';\r\n\r\nimport './PostDetails.scss';\r\n\r\nimport { deleteComment, getPostComments, addComment} from '../../api/comments';\r\nimport { getPostDetails } from '../../api/posts';\r\n\r\nexport const PostDetails = ({ selectedPostId }) => {\r\n  const [selectedPost, setSelectedPost] = useState(null);\r\n  const [comments, setComments] = useState(null);\r\n  const [commentsHidden, setCommentsHidden] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getPostDetails(selectedPostId)\r\n      .then(result => setSelectedPost(result));\r\n\r\n    setComments(null);\r\n\r\n    getPostComments(selectedPostId)\r\n      .then(result => setComments(result));\r\n  }, [selectedPostId]);\r\n\r\n  const removeComment = (id) => {\r\n    deleteComment(id)\r\n      .then(() => {\r\n        setComments(currentComment => (\r\n          currentComment.filter(comment => comment.id !== id)\r\n        ));\r\n      });\r\n  };\r\n\r\n  const addNewComment = (name, email, body) => {\r\n    const commentBody = {\r\n      name,\r\n      email,\r\n      body,\r\n      postId: selectedPostId,\r\n    };\r\n\r\n    addComment(commentBody)\r\n      .then((result) => {\r\n        setComments(currentComment => [...currentComment, result]);\r\n      });\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"PostDetails\">\r\n      <Link\r\n        to={`/post-update/${selectedPostId}`}\r\n        \r\n        className=\"button\"\r\n      >\r\n        Update post\r\n      </Link>\r\n\r\n      <h2>Post details:</h2>\r\n\r\n      {selectedPost ? (\r\n        <>\r\n          <section className=\"PostDetails__post\">\r\n            <b>{selectedPost.title}</b>\r\n            <p className=\"PostDetails__post--body\">{selectedPost.body}</p>\r\n          </section>\r\n\r\n          {comments ? (\r\n            <>\r\n              <section className=\"PostDetails__comments\">\r\n                {comments.length === 0\r\n                  ? 'No comments yet'\r\n                  : (\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"button\"\r\n                        onClick={() => {\r\n                          setCommentsHidden(currentStatus => !currentStatus);\r\n                        }}\r\n                      >\r\n                        {commentsHidden\r\n                          ? `Show ${comments.length} comments`\r\n                          : `Hide ${comments.length} comments`\r\n                        }\r\n                      </button>\r\n                    )}\r\n\r\n                {!commentsHidden && (\r\n                  <ul className=\"PostDetails__list\">\r\n                    {comments.map(comment => (\r\n                      <li className=\"PostDetails__list-item\" key={comment.id}>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"PostDetails__remove-button button\"\r\n                          onClick={() => {\r\n                            removeComment(comment.id);\r\n                          }}\r\n                        >\r\n                          X\r\n                        </button>\r\n                        <p>{comment.name}</p>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                )}\r\n              </section>\r\n\r\n              <section>\r\n                <div className=\"PostDetails__form-wrapper\">\r\n                  <NewCommentForm onAdd={addNewComment} />\r\n                </div>\r\n              </section>\r\n            </>\r\n          ) : (\r\n            <Loader />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostDetails.propTypes = {\r\n  selectedPostId: PropTypes.number.isRequired,\r\n};\r\n","import { get, remove, post, save } from './api';\r\n\r\nexport function getPostComments(postId) {\r\n  return get(`/comments?postId=${postId}`);\r\n}\r\n\r\nexport function deleteComment(commentId) {\r\n  return remove(`/comments/${commentId}`);\r\n}\r\n\r\nexport function addComment(comment) {\r\n  return save(`/comments`, comment);\r\n}\r\n","import React, { useState } from 'react';\r\nimport './PostAdd.scss';\r\n\r\n\r\nexport const PostAdd = ({ addPost }) => {\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [body, setBody] = useState('');\r\n\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    addPost({\r\n      title,\r\n      body,\r\n    })\r\n    clearForm();\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setTitle('');\r\n    setBody('');\r\n  }\r\n\r\n  return (\r\n    <form\r\n      className='PostAdd'\r\n      onSubmit={submitHandler}\r\n    >\r\n      <input\r\n        className='PostAdd__input'\r\n        placeholder='Enter post title'\r\n        value={title}\r\n        onChange={event => {\r\n          setTitle(event.target.value)\r\n        }} \r\n      >\r\n      </input>\r\n      <textarea\r\n        className='PostAdd__input'\r\n        placeholder='Enter post body'\r\n        value = {body}\r\n        onChange={event => {\r\n          setBody(event.target.value)\r\n        }} \r\n        rows='15'\r\n      >\r\n       </textarea>\r\n\r\n      <button\r\n        className='button PostAdd__button'\r\n        type='submit'\r\n      >\r\n        Confirm\r\n      </button>\r\n    </form>\r\n  )\r\n};\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport './styles/general.scss';\nimport { Header } from './components/Header';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { PostAdd } from './components/PostAdd';\nimport { PostUpdate } from './components/PostUpdate'\nimport { getPosts, getUserPosts, deletePost, createPost, update } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getPosts()\n      .then(data => setPosts(data));\n    getUsers()\n      .then(data => setUsers(data));\n  }, []);\n\n  const selectedUserPosts = ({ target }) => {\n    if (+target.value === 0) {\n      getPosts()\n        .then(data => setPosts(data));\n    }\n\n    getUserPosts(target.value)\n      .then(data => setPosts(data));\n  };\n\n  const setSelectPost = (postId) => {\n    if (postId === selectedPostId) {\n      return setSelectedPostId(0);\n    }\n\n    return setSelectedPostId(postId);\n  };\n\n  const removePost = (removePostId) => {\n    deletePost(removePostId)\n      .then(() => {\n        setPosts(currentPost => (\n          currentPost.filter(post => post.id !== removePostId)\n        ));\n      });\n  };\n\n  const addNewPost = (postData) => {\n    createPost(postData)\n      .then((result) => {\n        setPosts(currentPost => [...currentPost, result])\n    });\n  }\n\n  const updatePost = (postData) => {\n    update(postData)\n      .then((result) => {\n        setPosts(currentPost => [...currentPost, result])\n    });\n  }\n\n\n  return(\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <Header />\n      </header>\n\n      <Switch>\n        <Route path='/post-add'>\n          <PostAdd addPost={addNewPost} />\n        </Route>\n\n      <Route\n        path='/post-update/:postId'\n      >\n        <PostUpdate\n          selectedPostId={selectedPostId}\n          updatePost = {updatePost}\n        />\n      </Route>\n\n        <Route path='/' exact>\n          <main className=\"App__main\">\n            <div className=\"App__sidebar\">\n              <PostsList\n                posts={posts}\n                selectedPostId={selectedPostId}\n                setSelectPost={setSelectPost}\n                removePost={removePost}\n              />\n            </div>\n\n            <div className=\"App__content\">\n              {selectedPostId\n                ?\n                  (<PostDetails selectedPostId={selectedPostId}/>)\n                : 'No selected post'\n              }\n            </div>\n          </main>\n        </Route>\n        <p className='App__notFound'>Page not found!</p>\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import { get } from './api';\r\n\r\nexport const getUsers = () => get('/users');\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}